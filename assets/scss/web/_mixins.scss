@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

/// @param {font-size} $min-font-size - Minimum font-size
/// @param {font-size} $max-font-size - Maximum font-size
/// @param {width} $min-vw: 20em - Minimum Viewport Width
/// @param {width} $max-vw: $site_width - Maximum Viewport Width
@mixin fluid-type($min-font-size, $max-font-size, $min-vw: 320px, $max-vw: 1440px) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);
	@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
		& {
			font-size: $min-font-size;
			@media screen and (min-width: $min-vw) {
				font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
			}
			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	} @else {
		@error 'All units must be the same!';
	}
}

@mixin full-width {
	margin-right: -15px;
	margin-left: -15px;
	@media (min-width: 767px) {
		width: 100vw;
		max-width: 100vw;
		margin-right: calc(50% - 50vw);
		margin-left: calc(50% - 50vw);
	}
}

@mixin make-col-auto {
  flex: 0 0 auto;
  width: auto;
}

@mixin parallaxEls($num: 10) {
	@for $i from 1 through $num {
		$top: #{($i * 80) - 25}vh;

		&:nth-child(#{$i}) {
			top: $top
		}
	}
}

@mixin linkUnderline($start: true, $end: false) {
	@if $start or $end {
		text-decoration: none !important;
		background-repeat: repeat-x;
		background-repeat: no-repeat;
		background-size: 100% 1px;
		background-position: 0 calc(100% - 1px);
		background-image: linear-gradient(to right, currentColor, currentColor);
	}

	@if $start {
		background-position-y: calc(100% - 1px);
		// background-size: 100% 1px;
	} @else {
		background-position-y: calc(100% + 1px);
		// background-size: 0% 1px;
	}

	@if $end {
		&:hover {
			background-position-y: calc(100% - 1px);
			// background-size: 100% 1px;
		}
	} @else {
		&:hover {
			background-position-y: calc(100% + 1px);
			// background-size: 0% 1px;
		}
	}
}

@mixin section-margin($size: $section_margin) {
	.site-main & {
		margin-bottom: calc(#{$size / 10}vmax * 0.8333);
		@include media-breakpoint-up(xl) {
			 margin-bottom: ($size/16)+em;
		}
	}
}

@mixin icon($icon) {
	font-family: '#{$icomoon-font-family}' !important;
  speak: never;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	&:before {
		content: $icon;
	}
}

@mixin bullet($size: 0.375rem, $color: $color_red_alt) {
	width: $size;
	height: $size;
	border-radius: 50%;
	border: 1px solid $color;
}

@mixin accents() {
	position: absolute;
	width: 100%;
	left: 0;
	font-size: 1.25em;
	&:before, &:after {
		content: '+';
		position: absolute;
		line-height: 0;
	}
	&:before {
		left: 0;
		transform: translateX(-50%);
	}
	&:after {
		right: 0;
		transform: translateX(50%);
	}
	&:first-child {
		top: 0;
	}
	&:last-child {
		bottom: 0;
	}
}

@mixin horizontal-banner {
	.scene {
		padding: 0 1em;
		flex-direction: row;
		align-items: center;

		.welcome-to {
			width: 5.2em !important;
		}

		&__left {
			width: calc(50% + 0.5em);
			flex-shrink: 0;
			min-height: 1.2em;
			display: flex;
			justify-content: flex-end;
			padding-right: 0.25em;

			.where-is {
				width: 8.947em;
			}
		}

		&__right {
			width: auto;
			flex-grow: 0;
		}

		&--1 {
			&:before {
				content: '';
				position: absolute;
				width: 100%;
				left: 0;
				height: 56%;
				z-index: 2;
				top: 0;
				background: linear-gradient(to bottom,  rgba($color_white,1) 10%,rgba($color_white,0) 100%);
				filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#00ffffff',GradientType=0 );
			}

			&:before,
			&:after {
				height: 40%;
			}

			&:not(.done) .scene__left {
				min-height: 1.2em;
			}
		}

		&--2 {
			&.active {
				padding-bottom: 1.5em;
				transition: padding 0.4s 1s ease-in-out;
			}
		}

		.breaches {
			position: absolute;
			width: 11.76em;
			left: 50%;
			transform: translateX(-50%);
			white-space: nowrap;
			height: 1.2em;
			margin-top: 1.8em;
			font-size: 0.75em;
		}

		&__final {
			flex-grow: 1;
			display: flex;
			align-items: center;
			justify-content: space-around;
			background-color: $color_red_alt;
			z-index: 3;
			transition-delay: 1s;
			transition-duration: 0.5s;

			> * {
				opacity: 0;
				transition: opacity 0.4s 1.25s ease-in-out;
			}

			&.active {
				> * {
					opacity: 1;
				}
			}

			.logo {
				width: 6em;
				margin: 0 0 -0.6em;
			}
		}
	}
}

@mixin stagger($how_many) {
	> * {
		animation: inherit;
		@for $i from 1 through $how_many {
			&:nth-child(#{$i}) {
				animation-delay: #{$i * .12}s;
			}
		}
	}
}